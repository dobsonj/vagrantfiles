# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/ubuntu1804"
  #config.vm.hostname = "ubuntu1804"
  config.vm.define "ubuntu"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "#{Dir.home}/workspace", "/workspace", type: "nfs", nfs_udp: false

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  config.vm.provider :libvirt do |libvirt|
    # https://github.com/vagrant-libvirt/vagrant-libvirt/blob/master/README.md
    libvirt.driver = "kvm"
    libvirt.cpus = 4
    libvirt.memory = 8192
    libvirt.nested = true
    libvirt.volume_cache = "none"
    #libvirt.random_hostname = true 
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    # install essential build tools
    apt-get update
    apt-get install -y build-essential docker.io gcc jq net-tools

    # kubernetes
    apt-get install -y apt-transport-https ca-certificates curl
    curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
    echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
    apt-get update
    # apt-cache madison kubeadm | grep 1.15 | head -1
    apt-get install -y kubeadm=1.15.12-00 kubectl=1.15.12-00 kubelet=1.15.12-00

    # download and install latest golang
    GO_VERSION=$(curl -s https://go.dev/VERSION?m=text)
    wget -q -P /tmp https://go.dev/dl/${GO_VERSION}.linux-amd64.tar.gz
    tar -C /usr/local -xzf /tmp/${GO_VERSION}.linux-amd64.tar.gz
    rm /tmp/${GO_VERSION}.linux-amd64.tar.gz

    # coredns will not start if there is a localhost address in resolv.conf
    systemctl disable systemd-resolved
    systemctl stop systemd-resolved
    rm /etc/resolv.conf
    echo 'nameserver 1.1.1.1' > /etc/resolv.conf

    # add vagrant user to appropriate groups
    usermod -a -G docker vagrant

    # setup root home directory
    mkdir -p ~/go/bin ~/go/src
    echo "export GOPATH=\$HOME/go" >> ~/.bashrc
    echo "export PATH=\$PATH:\$HOME/go/bin:/usr/local/go/bin" >> ~/.bashrc
    cp /workspace/dotfiles/.vimrc ~/
    cp /workspace/dotfiles/.screenrc ~/
    ln -s /workspace ~/workspace

    # setup vagrant home directory
    su vagrant -c 'mkdir -p ~/go/bin ~/go/src'
    su vagrant -c 'echo "export GOPATH=\\$HOME/go" >> ~/.bashrc'
    su vagrant -c 'echo "export PATH=\\$PATH:\\$HOME/go/bin:/usr/local/go/bin" >> ~/.bashrc'
    su vagrant -c 'cp /workspace/dotfiles/.vimrc ~/'
    su vagrant -c 'cp /workspace/dotfiles/.screenrc ~/'
    su vagrant -c 'ln -s /workspace ~/workspace'
  SHELL
end
